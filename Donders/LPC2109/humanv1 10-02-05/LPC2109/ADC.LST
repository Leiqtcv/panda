ARM COMPILER V2.11,  ADC                                                                   20/10/09  09:30:17  PAGE 1   


ARM COMPILER V2.11, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN ADC.OBJ
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe ADC.c THUMB BROWSE TABS(4) 

stmt  level    source

    1          /*************************************************************************
    2                                  ADC.c
    3          
    4          Project         Controller      DJH MBFYS UMCN
    5          ----------------------------------------------
    6          Versie 1.00     14-09-2005      Dick Heeren
    7          **************************************************************************/
    8          #include <lpc21xx.h> 
    9          #include "ADC.h"
   10          #include "Config.h"
   11          
   12          static adc_buffer   AdcBuffer;
   13          static int          AdcActive;
   14          
   15          void ADC_Init(void)
   16          {   // Clock AD converter has to be less than 4.5 MHz.   (50 Mhz / (CLKDIV+1))  
   17   1          // Channels 0..3             7:0  -> 0F
   18   1          // Clock divided by         15:8  -> FF     (0D = 3.5714 MHz)    (FF = 0.19607 mHz)
   19   1          // Burst mode off           16    ->  0
   20   1          // CLKS 11 clocks           19:17 ->  0
   21   1          // Power down PDN=1         21    ->  1
   22   1          // No start                 26:24 ->  0
   23   1          int channel;
   24   1      
   25   1          AdcBuffer.select[0] = 1;
   26   1          AdcBuffer.select[1] = 1;
   27   1          AdcBuffer.select[2] = 1;
   28   1          AdcBuffer.select[3] = 1;
   29   1      
   30   1          AdcActive = 0;
   31   1          channel = (1 << AdcActive);
   32   1          PINSEL1 |= 0x55 << 22;              // channels 0,1,2,3
   33   1          ADCR = channel;
   34   1          ADCR |= ((0xFF << 8) | (1 << 21)); 
   35   1      
   36   1          VICVectAddr3 = (unsigned long)ADC_irq;
   37   1          VICVectCntl3 = 0x20 | 18;       // ADC interrupt (irq enable + number of interrupt)
   38   1          VICIntEnable = 1 << 18;         // Enable ADC interrupt
   39   1      
   40   1          ADCR |= (0x001 << 24);
   41   1      }
   42          
   43          void ADC_irq(void) __irq
   44          {
   45   1          int val, chan;
   46   1      
   47   1          val  = ((ADDR >>  6) & 0x03FF);     // Get result
   48   1          chan = ((ADDR >> 24) & 0x0007);     // and channel
   49   1      
   50   1          AdcBuffer.data[chan] = (int) val;
   51   1       
   52   1          AdcActive = AdcNext(AdcActive);
   53   1          chan = (1 << AdcActive);
   54   1      
   55   1          VICVectAddr = 3;                    // Acknowledge interrupt
   56   1      
   57   1          ADCR &= ~0xF;
   58   1          ADCR |= chan;
   59   1          ADCR |= (0x001 << 24);
ARM COMPILER V2.11,  ADC                                                                   20/10/09  09:30:17  PAGE 2   

   60   1      }
   61          
   62          void ADC_Select(int sel)
   63          {
   64   1          if (sel > 0) AdcBuffer.select[sel-1] = 1; else AdcBuffer.select[-1*(sel+1)] = 0;
   65   1      }
   66          
   67          int AdcNext(int current)
   68          {
   69   1          int next;
   70   1          next = current;
   71   1          if (++next == 4) next = 0;
   72   1          while ((AdcBuffer.select[next] == 0) && (next != current))
   73   1          {
   74   2              if (++next == 4) next = 0;
   75   2          }
   76   1      
   77   1          return next;
   78   1      }
   79          
   80          adc_buffer ADC_GetSamples()
   81          {
   82   1          return AdcBuffer;
   83   1      }
   84          
   85          
ARM COMPILER V2.11,  ADC                                                                   20/10/09  09:30:17  PAGE 3   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** PUBLICS:
 PUBLIC         ADC_irq?A
 PUBLIC         AdcNext?T
 PUBLIC         AdcNext?A
 PUBLIC         ADC_Init?T
 PUBLIC         ADC_Select?T
 PUBLIC         ADC_GetSamples?T



*** DATA SEGMENT '?DT0?ADC':
 00000000          AdcBuffer:
 00000000            DS          32
 00000020          AdcActive:
 00000020            DS          4



*** CODE SEGMENT '?PR?ADC_Init?T?ADC':
   16: {    // Clock AD converter has to be less than 4.5 MHz.  (50 Mhz / (CLKDIV+1))  
 00000000            ; SCOPE-START
   25:     AdcBuffer.select[0] = 1;
 00000000  2101      MOV         R1,#0x1
 00000002  4800      LDR         R0,=AdcBuffer + 0x10 ; AdcBuffer+16
 00000004  6001      STR         R1,[R0,#0x0] ; AdcBuffer+16
   26:     AdcBuffer.select[1] = 1;
 00000006  2101      MOV         R1,#0x1
 00000008  4800      LDR         R0,=AdcBuffer + 0x14 ; AdcBuffer+20
 0000000A  6001      STR         R1,[R0,#0x0] ; AdcBuffer+20
   27:     AdcBuffer.select[2] = 1;
 0000000C  2101      MOV         R1,#0x1
 0000000E  4800      LDR         R0,=AdcBuffer + 0x18 ; AdcBuffer+24
 00000010  6001      STR         R1,[R0,#0x0] ; AdcBuffer+24
   28:     AdcBuffer.select[3] = 1;
 00000012  2101      MOV         R1,#0x1
 00000014  4800      LDR         R0,=AdcBuffer + 0x1C ; AdcBuffer+28
 00000016  6001      STR         R1,[R0,#0x0] ; AdcBuffer+28
   30:     AdcActive = 0;
 00000018  2100      MOV         R1,#0x0
 0000001A  4800      LDR         R0,=AdcActive ; AdcActive
 0000001C  6001      STR         R1,[R0,#0x0] ; AdcActive
   31:     channel = (1 << AdcActive);
 0000001E  4800      LDR         R0,=AdcActive ; AdcActive
 00000020  6800      LDR         R0,[R0,#0x0] ; AdcActive
 00000022  2101      MOV         R1,#0x1
 00000024  4081      LSL         R1,R0
 00000026  ---- Variable 'channel' assigned to Register 'R1' ----
   32:     PINSEL1 |= 0x55 << 22;              // channels 0,1,2,3
 00000026  4800      LDR         R3,=0x15400000
 00000028  4800      LDR         R0,=0xE002C004
 0000002A  6802      LDR         R2,[R0,#0x0]
 0000002C  431A      ORR         R2,R3
 0000002E  6002      STR         R2,[R0,#0x0]
   33:     ADCR = channel;
 00000030  4800      LDR         R0,=0xE0034000
 00000032  6001      STR         R1,[R0,#0x0]
   34:     ADCR |= ((0xFF << 8) | (1 << 21)); 
 00000034  4800      LDR         R2,=0x20FF00
 00000036  4800      LDR         R0,=0xE0034000
 00000038  6801      LDR         R1,[R0,#0x0]
 0000003A  4311      ORR         R1,R2
 0000003C  6001      STR         R1,[R0,#0x0]
   36:     VICVectAddr3 = (unsigned long)ADC_irq;
 0000003E  4900      LDR         R1,=ADC_irq?A ; ADC_irq?A
 00000040  4800      LDR         R0,=0xFFFFF10C
 00000042  6001      STR         R1,[R0,#0x0]
   37:     VICVectCntl3 = 0x20 | 18;       // ADC interrupt (irq enable + number of interrupt)
ARM COMPILER V2.11,  ADC                                                                   20/10/09  09:30:17  PAGE 4   

 00000044  2132      MOV         R1,#0x32
 00000046  4800      LDR         R0,=0xFFFFF20C
 00000048  6001      STR         R1,[R0,#0x0]
   38:     VICIntEnable = 1 << 18;         // Enable ADC interrupt
 0000004A  4800      LDR         R1,=0x40000
 0000004C  4800      LDR         R0,=0xFFFFF010
 0000004E  6001      STR         R1,[R0,#0x0]
   40:     ADCR |= (0x001 << 24);
 00000050  4800      LDR         R2,=0x1000000
 00000052  4800      LDR         R0,=0xE0034000
 00000054  6801      LDR         R1,[R0,#0x0]
 00000056  4311      ORR         R1,R2
 00000058  6001      STR         R1,[R0,#0x0]
 0000005A            ; SCOPE-END
   41: }
 0000005A  4770      BX          R14
 0000005C          ENDP ; 'ADC_Init?T'


*** CODE SEGMENT '?PR?ADC_irq?A?ADC':
   43: void ADC_irq(void) __irq
 00000000  E92D5F1F  STMDB       R13!,{R0-R4,R8-R12,LR}
   44: {
 00000004            ; SCOPE-START
   47:     val  = ((ADDR >>  6) & 0x03FF);     // Get result
 00000004  E5100000  LDR         R0,=0xE0034004
 00000008  E5900000  LDR         R0,[R0,#0x0]
 0000000C  E1A00320  MOV         R0,R0,LSR #6
 00000010  E5101000  LDR         R1,=0x3FF
 00000014  E0000001  AND         R0,R0,R1
 00000018  ---- Variable 'val' assigned to Register 'R0' ----
   48:     chan = ((ADDR >> 24) & 0x0007);     // and channel
 00000018  E5101000  LDR         R1,=0xE0034004
 0000001C  E5914000  LDR         R4,[R1,#0x0]
 00000020  E1A04C24  MOV         R4,R4,LSR #24
 00000024  E2044007  AND         R4,R4,#0x0007
 00000028  ---- Variable 'chan' assigned to Register 'R4' ----
   50:     AdcBuffer.data[chan] = (int) val;
 00000028  E1A02104  MOV         R2,R4,LSL #2 ; chan
 0000002C  E5101000  LDR         R1,=AdcBuffer ; AdcBuffer
 00000030  E7810002  STR         R0,[R1,+R2] ; val
   52:      AdcActive = AdcNext(AdcActive);
 00000034  E5100000  LDR         R0,=AdcActive ; AdcActive
 00000038  E5900000  LDR         R0,[R0,#0x0] ; AdcActive
 0000003C  EBFFFFEF  BL          AdcNext?A  ; Targ=0x0
 00000040  E5101000  LDR         R1,=AdcActive ; AdcActive
 00000044  E5810000  STR         R0,[R1,#0x0] ; AdcActive
   53:     chan = (1 << AdcActive);
 00000048  E5100000  LDR         R0,=AdcActive ; AdcActive
 0000004C  E5900000  LDR         R0,[R0,#0x0] ; AdcActive
 00000050  E3A04001  MOV         R4,#0x1
 00000054  E1A04014  MOV         R4,R4,LSL R0
   55:       VICVectAddr = 3;                  // Acknowledge interrupt
 00000058  E3A01003  MOV         R1,#0x3
 0000005C  E5100000  LDR         R0,=0xFFFFF030
 00000060  E5801000  STR         R1,[R0,#0x0]
   57:     ADCR &= ~0xF;
 00000064  E5100000  LDR         R0,=0xE0034000
 00000068  E5901000  LDR         R1,[R0,#0x0]
 0000006C  E3C1100F  BIC         R1,R1,#0x000F
 00000070  E5801000  STR         R1,[R0,#0x0]
   58:     ADCR |= chan;
 00000074  E1A02004  MOV         R2,R4 ; chan
 00000078  E5100000  LDR         R0,=0xE0034000
 0000007C  E5901000  LDR         R1,[R0,#0x0]
 00000080  E1811002  ORR         R1,R1,R2 ; chan
 00000084  E5801000  STR         R1,[R0,#0x0]
   59:     ADCR |= (0x001 << 24);
ARM COMPILER V2.11,  ADC                                                                   20/10/09  09:30:17  PAGE 5   

 00000088  E5100000  LDR         R0,=0xE0034000
 0000008C  E5901000  LDR         R1,[R0,#0x0]
 00000090  E3811401  ORR         R1,R1,#0x1000000
 00000094  E5801000  STR         R1,[R0,#0x0]
 00000098            ; SCOPE-END
   60: }
 00000098  E8BD5F1F  LDMIA       R13!,{R0-R4,R8-R12,LR}
 0000009C  E25EF004  SUBS        R15,R14,#0x0004
 000000A0          ENDP ; 'ADC_irq?A'


*** CODE SEGMENT '?PR?ADC_Select?T?ADC':
   62: void ADC_Select(int sel)
 00000000  ---- Variable 'sel' assigned to Register 'R0' ----
   64:     if (sel > 0) AdcBuffer.select[sel-1] = 1; else AdcBuffer.select[-1*(sel+1)] = 0;
 00000000  2800      CMP         R0,#0x0 ; sel
 00000002  DD04      BLE         L_1  ; T=0x0000000E
 00000004  2101      MOV         R1,#0x1
 00000006  0083      LSL         R3,R0,#0x2 ; sel
 00000008  4800      LDR         R2,=AdcBuffer + 0xC ; AdcBuffer+12
 0000000A  50D1      STR         R1,[R2,R3]
 0000000C  E005      B           L_2  ; T=0x0000001A
 0000000E          L_1:
 0000000E  2100      MOV         R1,#0x0
 00000010  4800      LDR         R2,=0xFFFFFFFF
 00000012  4342      MUL         R2,R0 ; sel
 00000014  0092      LSL         R2,R2,#0x2 ; sel
 00000016  4800      LDR         R0,=AdcBuffer + 0xC ; AdcBuffer+12
 00000018  5081      STR         R1,[R0,R2]
 0000001A          L_2:
   65: }
 0000001A  4770      BX          R14
 0000001C          ENDP ; 'ADC_Select?T'


*** CODE SEGMENT '?PR?AdcNext?T?ADC':
   67: int AdcNext(int current)
 00000000  ---- Variable 'current' assigned to Register 'R0' ----
   68: {
 00000000            ; SCOPE-START
   70:     next = current;
 00000000  1C01      MOV         R1,R0 ; next
 00000002  ---- Variable 'next' assigned to Register 'R1' ----
   71:     if (++next == 4) next = 0;
 00000002  1C0A      MOV         R2,R1 ; next
 00000004  3201      ADD         R2,#0x1
 00000006  1C11      MOV         R1,R2 ; next
 00000008  2A04      CMP         R2,#0x4 ; next
 0000000A  D100      BNE         L_7  ; T=0x0000000E
 0000000C  2100      MOV         R1,#0x0
   72:     while ((AdcBuffer.select[next] == 0) && (next != current))
 0000000E          L_7:
 0000000E  E005      B           L_4  ; T=0x0000001C
 00000010          L_6:
   74:         if (++next == 4) next = 0;
 00000010  1C0A      MOV         R2,R1 ; next
 00000012  3201      ADD         R2,#0x1
 00000014  1C11      MOV         R1,R2 ; next
 00000016  2A04      CMP         R2,#0x4 ; next
 00000018  D100      BNE         L_4  ; T=0x0000001C
 0000001A  2100      MOV         R1,#0x0
   75:     }
 0000001C          L_4:
 0000001C  008B      LSL         R3,R1,#0x2 ; next
 0000001E  4800      LDR         R2,=AdcBuffer + 0x10 ; AdcBuffer+16
 00000020  58D2      LDR         R2,[R2,R3]
 00000022  2A00      CMP         R2,#0x0
 00000024  D101      BNE         L_5  ; T=0x0000002A
 00000026  4281      CMP         R1,R0 ; next
 00000028  D1F2      BNE         L_6  ; T=0x00000010
ARM COMPILER V2.11,  ADC                                                                   20/10/09  09:30:17  PAGE 6   

 0000002A          L_5:
   77:     return next;
 0000002A  1C08      MOV         R0,R1 ; next
 0000002C            ; SCOPE-END
   78: }
 0000002C  4770      BX          R14
 0000002E          ENDP ; 'AdcNext?T'


*** CODE SEGMENT '?PR?ADC_GetSamples?T?ADC':
   80: adc_buffer ADC_GetSamples()
 00000000  ---- Variable '?STR_RET?' assigned to Register 'R0' ----
   81: {
 00000000            ; SCOPE-START
   82:     return AdcBuffer;
 00000000  4800      LDR         R1,=AdcBuffer ; AdcBuffer
 00000002  1C00      MOV         R0,R0 ; ?STR_RET?
 00000004  D004      BEQ         L_14  ; T=0x00000010
 00000006  2208      MOV         R2,#0x8
 00000008          L_15:
 00000008  C908      LDMIA       R1!,{R3}
 0000000A  C008      STMIA       R0!,{R3}
 0000000C  1E52      SUB         R2,R2,#0x1
 0000000E  D1FB      BNE         L_15  ; T=0x00000008
 00000010          L_14:
 00000010            ; SCOPE-END
   83: }
 00000010  4770      BX          R14
 00000012          ENDP ; 'ADC_GetSamples?T'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =        36
  const size           =    ------
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
