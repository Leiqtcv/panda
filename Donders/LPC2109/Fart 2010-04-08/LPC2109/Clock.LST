ARM COMPILER V2.11,  Clock                                                                 28/04/10  15:26:51  PAGE 1   


ARM COMPILER V2.11, COMPILATION OF MODULE Clock
OBJECT MODULE PLACED IN Clock.OBJ
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe Clock.c THUMB BROWSE TABS(4) 

stmt  level    source

    1          /*************************************************************************
    2                                  clock.c
    3          
    4          Project         Trainen aap     DJH CNS UMCN
    5          --------------------------------------------------------------------------
    6          Versie 1.00     02-02-2006      Dick Heeren
    7          **************************************************************************/
    8          #include <lpc21xx.h> 
    9          #include <inttypes.h>
   10          #include "Clock.h" 
   11          
   12          unsigned int Ticks;
   13          unsigned int Seconds;
   14          unsigned int Count;
   15          unsigned int countWait;
   16          
   17          // Setup timer
   18          void Clock_Init(void)
   19          {
   20   1          Seconds = 0;
   21   1          Count   = 0;
   22   1          Ticks = 0;
   23   1          T0PR  = 0;      // prescale register
   24   1          T0PC  = 0;      // prescale counter = max T0PR
   25   1          T0MR0 = 50000;  // clock 1 mSec -> 50000 
   26   1          T0MCR = 3;
   27   1          T0TCR = 1;
   28   1          VICVectAddr0 = (unsigned long) timer0;
   29   1          VICVectCntl0 = 0x20 | 4;
   30   1          VICIntEnable = 1 << 4; 
   31   1      }
   32          
   33          // Timer
   34          void timer0(void) __irq
   35          {
   36   1          Ticks++;
   37   1      
   38   1          if (++Count == 1000)    // clock 1 mSec 
   39   1          {
   40   2              Seconds++;
   41   2              Count = 0;
   42   2          }
   43   1          if (countWait < 10000) countWait++; else countWait = 0;
   44   1      
   45   1          T0IR = 1;
   46   1          VICVectAddr = 0;
   47   1      }
   48          
   49          unsigned int Clock_GetTicks(void)
   50          {
   51   1          return Ticks;
   52   1      }
   53          
   54          unsigned int Clock_GetSeconds(void)
   55          {
   56   1          return Seconds;
   57   1      }
   58          
   59          void Clock_Reset(void)
ARM COMPILER V2.11,  Clock                                                                 28/04/10  15:26:51  PAGE 2   

   60          {
   61   1          Ticks = 0;
   62   1      }
   63          
   64          unsigned int Clock_GetCountWait(void)
   65          {
   66   1          return countWait;
   67   1      }
   68          
   69          void Clock_ClrCountWait(void)
   70          {
   71   1          countWait = 0;
   72   1      }
ARM COMPILER V2.11,  Clock                                                                 28/04/10  15:26:51  PAGE 3   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** PUBLICS:
 PUBLIC         Clock_Init?T
 PUBLIC         Clock_GetTicks?T
 PUBLIC         Clock_GetSeconds?T
 PUBLIC         Clock_Reset?T
 PUBLIC         Clock_GetCountWait?T
 PUBLIC         Clock_ClrCountWait?T
 PUBLIC         timer0?A
 PUBLIC         Ticks
 PUBLIC         Seconds
 PUBLIC         Count
 PUBLIC         countWait



*** DATA SEGMENT '?DT0?Clock':
 00000000          Ticks:
 00000000            DS          4
 00000004          Seconds:
 00000004            DS          4
 00000008          Count:
 00000008            DS          4
 0000000C          countWait:
 0000000C            DS          4



*** CODE SEGMENT '?PR?Clock_Init?T?Clock':
   20:     Seconds = 0;
 00000000  2100      MOV         R1,#0x0
 00000002  4800      LDR         R0,=Seconds ; Seconds
 00000004  6001      STR         R1,[R0,#0x0] ; Seconds
   21:     Count   = 0;
 00000006  2100      MOV         R1,#0x0
 00000008  4800      LDR         R0,=Count ; Count
 0000000A  6001      STR         R1,[R0,#0x0] ; Count
   22:     Ticks = 0;
 0000000C  2100      MOV         R1,#0x0
 0000000E  4800      LDR         R0,=Ticks ; Ticks
 00000010  6001      STR         R1,[R0,#0x0] ; Ticks
   23:     T0PR  = 0;      // prescale register
 00000012  2100      MOV         R1,#0x0
 00000014  4800      LDR         R0,=0xE000400C
 00000016  6001      STR         R1,[R0,#0x0]
   24:     T0PC  = 0;      // prescale counter = max T0PR
 00000018  2100      MOV         R1,#0x0
 0000001A  4800      LDR         R0,=0xE0004010
 0000001C  6001      STR         R1,[R0,#0x0]
   25:     T0MR0 = 50000;  // clock 1 mSec -> 50000 
 0000001E  4800      LDR         R1,=0xC350
 00000020  4800      LDR         R0,=0xE0004018
 00000022  6001      STR         R1,[R0,#0x0]
   26:     T0MCR = 3;
 00000024  2103      MOV         R1,#0x3
 00000026  4800      LDR         R0,=0xE0004014
 00000028  6001      STR         R1,[R0,#0x0]
   27:     T0TCR = 1;
 0000002A  2101      MOV         R1,#0x1
 0000002C  4800      LDR         R0,=0xE0004004
 0000002E  6001      STR         R1,[R0,#0x0]
   28:     VICVectAddr0 = (unsigned long) timer0;
 00000030  4900      LDR         R1,=timer0?A ; timer0?A
 00000032  4800      LDR         R0,=0xFFFFF100
 00000034  6001      STR         R1,[R0,#0x0]
   29:     VICVectCntl0 = 0x20 | 4;
 00000036  2124      MOV         R1,#0x24
 00000038  4800      LDR         R0,=0xFFFFF200
ARM COMPILER V2.11,  Clock                                                                 28/04/10  15:26:51  PAGE 4   

 0000003A  6001      STR         R1,[R0,#0x0]
   30:     VICIntEnable = 1 << 4; 
 0000003C  2110      MOV         R1,#0x10
 0000003E  4800      LDR         R0,=0xFFFFF010
 00000040  6001      STR         R1,[R0,#0x0]
   31: }
 00000042  4770      BX          R14
 00000044          ENDP ; 'Clock_Init?T'


*** CODE SEGMENT '?PR?timer0?A?Clock':
   34: void timer0(void) __irq
 00000000  E92D0003  STMDB       R13!,{R0-R1}
   36:     Ticks++;
 00000004  E5100000  LDR         R0,=Ticks ; Ticks
 00000008  E5901000  LDR         R1,[R0,#0x0] ; Ticks
 0000000C  E2811001  ADD         R1,R1,#0x0001
 00000010  E5801000  STR         R1,[R0,#0x0] ; Ticks
   38:     if (++Count == 1000)    // clock 1 mSec 
 00000014  E5101000  LDR         R1,=Count ; Count
 00000018  E5910000  LDR         R0,[R1,#0x0] ; Count
 0000001C  E2800001  ADD         R0,R0,#0x0001
 00000020  E5810000  STR         R0,[R1,#0x0] ; Count
 00000024  E3500FFA  CMP         R0,#0x03E8
 00000028  1A000006  BNE         L_1  ; Targ=0x48
   40:         Seconds++;
 0000002C  E5100000  LDR         R0,=Seconds ; Seconds
 00000030  E5901000  LDR         R1,[R0,#0x0] ; Seconds
 00000034  E2811001  ADD         R1,R1,#0x0001
 00000038  E5801000  STR         R1,[R0,#0x0] ; Seconds
   41:         Count = 0;
 0000003C  E3A01000  MOV         R1,#0x0
 00000040  E5100000  LDR         R0,=Count ; Count
 00000044  E5801000  STR         R1,[R0,#0x0] ; Count
   42:     }
 00000048          L_1:
   43:     if (countWait < 10000) countWait++; else countWait = 0;
 00000048  E5100000  LDR         R0,=countWait ; countWait
 0000004C  E5901000  LDR         R1,[R0,#0x0] ; countWait
 00000050  E5100000  LDR         R0,=0x2710
 00000054  E1510000  CMP         R1,R0
 00000058  2A000003  BCS         L_2  ; Targ=0x6C
 0000005C  E5100000  LDR         R0,=countWait ; countWait
 00000060  E2811001  ADD         R1,R1,#0x0001
 00000064  E5801000  STR         R1,[R0,#0x0] ; countWait
 00000068  EA000002  B           L_3  ; Targ=0x78
 0000006C          L_2:
 0000006C  E3A01000  MOV         R1,#0x0
 00000070  E5100000  LDR         R0,=countWait ; countWait
 00000074  E5801000  STR         R1,[R0,#0x0] ; countWait
 00000078          L_3:
   45:     T0IR = 1;
 00000078  E3A01001  MOV         R1,#0x1
 0000007C  E5100000  LDR         R0,=0xE0004000
 00000080  E5801000  STR         R1,[R0,#0x0]
   46:     VICVectAddr = 0;
 00000084  E3A01000  MOV         R1,#0x0
 00000088  E5100000  LDR         R0,=0xFFFFF030
 0000008C  E5801000  STR         R1,[R0,#0x0]
   47: }
 00000090  E8BD0003  LDMIA       R13!,{R0-R1}
 00000094  E25EF004  SUBS        R15,R14,#0x0004
 00000098          ENDP ; 'timer0?A'


*** CODE SEGMENT '?PR?Clock_GetTicks?T?Clock':
   51:     return Ticks;
 00000000  4800      LDR         R0,=Ticks ; Ticks
 00000002  6800      LDR         R0,[R0,#0x0] ; Ticks
   52: }
ARM COMPILER V2.11,  Clock                                                                 28/04/10  15:26:51  PAGE 5   

 00000004  4770      BX          R14
 00000006          ENDP ; 'Clock_GetTicks?T'


*** CODE SEGMENT '?PR?Clock_GetSeconds?T?Clock':
   56:     return Seconds;
 00000000  4800      LDR         R0,=Seconds ; Seconds
 00000002  6800      LDR         R0,[R0,#0x0] ; Seconds
   57: }
 00000004  4770      BX          R14
 00000006          ENDP ; 'Clock_GetSeconds?T'


*** CODE SEGMENT '?PR?Clock_Reset?T?Clock':
   61:     Ticks = 0;
 00000000  2100      MOV         R1,#0x0
 00000002  4800      LDR         R0,=Ticks ; Ticks
 00000004  6001      STR         R1,[R0,#0x0] ; Ticks
   62: }
 00000006  4770      BX          R14
 00000008          ENDP ; 'Clock_Reset?T'


*** CODE SEGMENT '?PR?Clock_GetCountWait?T?Clock':
   66:     return countWait;
 00000000  4800      LDR         R0,=countWait ; countWait
 00000002  6800      LDR         R0,[R0,#0x0] ; countWait
   67: }
 00000004  4770      BX          R14
 00000006          ENDP ; 'Clock_GetCountWait?T'


*** CODE SEGMENT '?PR?Clock_ClrCountWait?T?Clock':
   71:     countWait = 0;
 00000000  2100      MOV         R1,#0x0
 00000002  4800      LDR         R0,=countWait ; countWait
 00000004  6001      STR         R1,[R0,#0x0] ; countWait
 00000006  4770      BX          R14
 00000008          ENDP ; 'Clock_ClrCountWait?T'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =        16
  const size           =    ------
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
