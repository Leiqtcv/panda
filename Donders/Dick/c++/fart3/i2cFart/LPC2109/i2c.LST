ARM COMPILER V2.11,  i2c                                                                   08/06/11  15:08:37  PAGE 1   


ARM COMPILER V2.11, COMPILATION OF MODULE i2c
OBJECT MODULE PLACED IN i2c.OBJ
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe i2c.c THUMB BROWSE TABS(4) 

stmt  level    source

    1          /*************************************************************************
    2                                  I2C.C
    3          
    4          Project         Controller      DJH MBFYS UMCN
    5          --------------------------------------------------------------------------
    6          Versie 1.00     19-05-2005      Dick Heeren
    7          **************************************************************************/
    8          
    9          #include <lpc21xx.h> 
   10          #include "I2C.h" 
   11          #include "Config.h"
   12          
   13          /* Dual color leds(green, red) are used. 32 "SAA1064 seven segment        */
   14          /* led driver" are used (16 per color), due to fact that it is a seven    */
   15          /* segment driver, the intensity of the leds are adjusted in groups of    */
   16          /* seven leds. The PCF8574 selects one of the SAA1064 IC's (red or green).*/
   17          
   18          //-> I2C Control Clear Register bits
   19          #define I2CONCLR_AA   0x04;     // Assert acknowledge flag
   20          #define I2CONCLR_SI   0x08;     // I2C interrupt flag
   21          #define I2CONCLR_STA  0x20;     // Start flag
   22          #define I2CONCLR_I2EN 0x40;     // I2C interface enable 
   23          
   24          //-> I2C Control Set Register bits
   25          #define I2CONSET_AA   0x04;     // Assert acknowledge flag
   26          #define I2CONSET_SI   0x08;     // I2C interrupt flag
   27          #define I2CONSET_STO  0x10;     // Stop flag
   28          #define I2CONSET_STA  0x20;     // Start flag
   29          #define I2CONSET_I2EN 0x40;     // I2C interface enable 
   30          
   31          //-> I2C Message Codes (see also page 23 80C51 overview
   32          #define Start_TXD        0x08   // Start condition has been transmitted
   33          #define Rep_Start_TXD    0x10   // Repeated Start Condition ...
   34          #define Address_TXD_ACK  0x18   // SLA+W has been transmitted, ACK has been received
   35          #define Address_TXD_NACK 0x20   //  .... NOT ACK has been received
   36          #define Data_TXD_ACK     0x28   // Data Byte has been transmitted, ACK has been received
   37          #define Data_TXD_NACK    0x30   //  .... NOT ACK has been received
   38          #define ARB_Lost         0x38   // Arbitration lost in SLA+R/W or Data bytes
   39          #define Address_RXD_ACK  0x40   // SLA+R has been transmitted, ACK has been received
   40          #define Address_RXD_NACK 0x48   //  .... NOT ACK has been received
   41          #define Data_RXD_ACK     0x50   // Data Byte has been received, ACK has been returned
   42          #define Data_RXD_NACK    0x58   //  .... NOT ACK has been returned
   43          
   44          #define I2C_Error        0x00
   45          #define I2C_OK           0x01
   46          #define I2C_Busy         0x02
   47          
   48          unsigned char dataBuffer[4], numBytes, deviceAddress, dataIn, status, ReadWrite;
   49          int index;
   50          
   51          void I2C_Init(void)
   52          {
   53   1          PINSEL0 &= ~(3<<4);         // setup SCL pin 02 5:4 = 01
   54   1          PINSEL0 |=   1<<4;      
   55   1      
   56   1          PINSEL0 &= ~(3<<6);         // setup SDA pin 03 7:6 = 01
   57   1          PINSEL0 |=   1<<6;
   58   1      
   59   1          I2C_SetBitrate();           // set default bitrate = 100 KHz
ARM COMPILER V2.11,  i2c                                                                   08/06/11  15:08:37  PAGE 2   

   60   1      
   61   1          // disable, reset interface and enable interface
   62   1          I2CONCLR = 0x6C;            // clears in CONSET AA, SI, STA and I2EN bit
   63   1      
   64   1          VICIntSelect = 1;
   65   1          VICVectAddr1 = (unsigned long)I2C_irq;
   66   1          VICVectCntl1 = 0x20 | 9;    // I2C interrupt (irq enable + number of interrupt)
   67   1          VICIntEnable = 1 << 9;      // Enable I2C interrupt
   68   1      
   69   1          I2CONSET = I2CONSET_I2EN;   // enable interface
   70   1      }                   
   71          
   72          void I2C_SetBitrate(void)
   73          {
   74   1          // choose I2SCLL = I2CLH for a duty cicle of 50% 
   75   1      
   76   1          // Bit frequency = fclk / ( LH + LL).
   77   1          // Desired bit frequency = 100 Khz, fclk = PPL_Multiplier*crystal = 5*10 = 50 Mhz;
   78   1          unsigned int time;
   79   1      
   80   1          time = (LPCconfig()->PLL_Multiplier*LPCconfig()->crystal) / 100000; 
   81   1          I2SCLL = time / 2;
   82   1          I2SCLH = time - I2SCLL;
   83   1      }
   84          
   85          void I2C_irq(void) __irq
   86          {
   87   1          switch (I2STAT)
   88   1          {
   89   2          case Start_TXD:                         // Start condition has been transmitted
   90   2              if (ReadWrite)
   91   2                  I2DAT = deviceAddress | 0x01;   // Read mode
   92   2              else
   93   2                  I2DAT = deviceAddress & 0xFE;   // Write mode
   94   2              I2CONCLR = 0x38; // I2CONCLR_STA;   // Clear start bit
   95   2              break;
   96   2      
   97   2          case Rep_Start_TXD:
   98   2              I2CONCLR = I2CONCLR_STA;    // Clear start bit
   99   2              break;
  100   2      
  101   2          case Address_TXD_ACK:           // SLA+W has been transmitted, ACK has been received
  102   2              index = 0;                  // Send first byte
  103   2              I2DAT = dataBuffer[index];
  104   2              I2CONCLR = 0x38; // I2CONCLR_STA;   // Clear start bit
  105   2              break;
  106   2      
  107   2          case Address_TXD_NACK:          // SLA+W has been transmitted, NOT ACK has been received
  108   2              I2CONSET = I2CONSET_STO;    // Stop the transfer - ERROR
  109   2              status = I2C_Error;
  110   2              break;
  111   2      
  112   2          case Data_TXD_ACK:              // Data Byte has been transmitted, ACK has been received
  113   2              index++;                    // Next byte if any
  114   2              if (numBytes > index)
  115   2                  I2DAT = dataBuffer[index];
  116   2              else
  117   2              {
  118   3                  I2CONSET = I2CONSET_STO;// Stop the transfer - OK           
  119   3                  status = I2C_OK;
  120   3              }
  121   2              break;
  122   2      
  123   2          case Data_TXD_NACK:             // Data Byte has been transmitted, NOT ACK has been received
  124   2              I2CONSET = I2CONSET_STO;    // Stop the transfer - ERROR
  125   2              status = I2C_Error;
ARM COMPILER V2.11,  i2c                                                                   08/06/11  15:08:37  PAGE 3   

  126   2              break;
  127   2      
  128   2          case Address_RXD_ACK:           // SLA+R has been transmitted, ACK has been received
  129   2              break;
  130   2      
  131   2          case Address_RXD_NACK:          // SLA+R has been transmitted, NOT ACK has been received
  132   2              status = I2C_Error;
  133   2              break;
  134   2      
  135   2          case Data_RXD_NACK:             // Data Byte has been received, no ACK sent
  136   2              dataIn = I2DAT;             // Read the byte
  137   2              I2CONSET = I2CONSET_STO;    // Stop the transfer - OK
  138   2              status = I2C_OK;
  139   2              break;
  140   2      
  141   2          default:                        // Error out, unknown state
  142   2              I2CONSET = I2CONSET_STO;    // Stop the transfer - ERROR
  143   2              status = I2C_Error;
  144   2              break;
  145   2          }
  146   1          I2CONCLR = I2CONCLR_SI;
  147   1          VICVectAddr = 1;                // Acknowledge interrupt
  148   1      }
  149          
  150          int I2C_Start(void)
  151          {
  152   1          I2CONSET = I2CONSET_STA;
  153   1          status = I2C_Busy;
  154   1          while (status == I2C_Busy);
  155   1          return status;
  156   1      }
  157          
  158          int I2C_SendByte(unsigned char address, int num, int data[4])
  159          {
  160   1      
  161   1          int i;
  162   1          deviceAddress = address;
  163   1          ReadWrite     = 0;
  164   1          numBytes      = num;
  165   1          for (i = 0; i < num; i++) dataBuffer[i] = data[i];
  166   1          return I2C_Start();
  167   1      }
ARM COMPILER V2.11,  i2c                                                                   08/06/11  15:08:37  PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE16 (LPCconfig?T)
 EXTERN CODE16 (?C?UDIV?T)



*** PUBLICS:
 PUBLIC         I2C_Init?T
 PUBLIC         I2C_SendByte?T
 PUBLIC         I2C_irq?A
 PUBLIC         I2C_SetBitrate?T
 PUBLIC         I2C_Start?T
 PUBLIC         dataBuffer
 PUBLIC         numBytes
 PUBLIC         deviceAddress
 PUBLIC         dataIn
 PUBLIC         status
 PUBLIC         ReadWrite
 PUBLIC         index



*** DATA SEGMENT '?DT0?i2c':
 00000000          index:
 00000000            DS          4
 00000004          dataBuffer:
 00000004            DS          4
 00000008          numBytes:
 00000008            DS          1
 00000009          deviceAddress:
 00000009            DS          1
 0000000A          dataIn:
 0000000A            DS          1
 0000000B          status:
 0000000B            DS          1
 0000000C          ReadWrite:
 0000000C            DS          1



*** CODE SEGMENT '?PR?I2C_Init?T?i2c':
   51: void I2C_Init(void)
 00000000  B500      PUSH        {LR}
   53:      PINSEL0 &= ~(3<<4);            // setup SCL pin 02 5:4 = 01
 00000002  2230      MOV         R2,#0x30
 00000004  4800      LDR         R0,=0xE002C000
 00000006  6801      LDR         R1,[R0,#0x0]
 00000008  4391      BIC         R1,R2
 0000000A  6001      STR         R1,[R0,#0x0]
   54:     PINSEL0 |=   1<<4;      
 0000000C  2210      MOV         R2,#0x10
 0000000E  4800      LDR         R0,=0xE002C000
 00000010  6801      LDR         R1,[R0,#0x0]
 00000012  4311      ORR         R1,R2
 00000014  6001      STR         R1,[R0,#0x0]
   56:     PINSEL0 &= ~(3<<6);         // setup SDA pin 03 7:6 = 01
 00000016  22C0      MOV         R2,#0xC0
 00000018  4800      LDR         R0,=0xE002C000
 0000001A  6801      LDR         R1,[R0,#0x0]
 0000001C  4391      BIC         R1,R2
 0000001E  6001      STR         R1,[R0,#0x0]
   57:     PINSEL0 |=   1<<6;
 00000020  2240      MOV         R2,#0x40
 00000022  4800      LDR         R0,=0xE002C000
 00000024  6801      LDR         R1,[R0,#0x0]
 00000026  4311      ORR         R1,R2
 00000028  6001      STR         R1,[R0,#0x0]
   59:     I2C_SetBitrate();           // set default bitrate = 100 KHz
 0000002A  F7FF      BL          I2C_SetBitrate?T  ; T=0x0001  (1)
ARM COMPILER V2.11,  i2c                                                                   08/06/11  15:08:37  PAGE 5   

 0000002C  FFE9      BL          I2C_SetBitrate?T  ; T=0x0001  (2)
   62:     I2CONCLR = 0x6C;            // clears in CONSET AA, SI, STA and I2EN bit
 0000002E  216C      MOV         R1,#0x6C
 00000030  4800      LDR         R0,=0xE001C018
 00000032  7001      STRB        R1,[R0,#0x0]
   64:     VICIntSelect = 1;
 00000034  2101      MOV         R1,#0x1
 00000036  4800      LDR         R0,=0xFFFFF00C
 00000038  6001      STR         R1,[R0,#0x0]
   65:     VICVectAddr1 = (unsigned long)I2C_irq;
 0000003A  4900      LDR         R1,=I2C_irq?A ; I2C_irq?A
 0000003C  4800      LDR         R0,=0xFFFFF104
 0000003E  6001      STR         R1,[R0,#0x0]
   66:     VICVectCntl1 = 0x20 | 9;    // I2C interrupt (irq enable + number of interrupt)
 00000040  2129      MOV         R1,#0x29
 00000042  4800      LDR         R0,=0xFFFFF204
 00000044  6001      STR         R1,[R0,#0x0]
   67:     VICIntEnable = 1 << 9;      // Enable I2C interrupt
 00000046  4980      LDR         R1,=0x200
 00000048  4800      LDR         R0,=0xFFFFF010
 0000004A  6001      STR         R1,[R0,#0x0]
   69:     I2CONSET = I2CONSET_I2EN;   // enable interface
 0000004C  2140      MOV         R1,#0x40
 0000004E  4800      LDR         R0,=0xE001C000
 00000050  7001      STRB        R1,[R0,#0x0]
   70: }                    
 00000052  BC08      POP         {R3}
 00000054  4718      BX          R3
 00000056          ENDP ; 'I2C_Init?T'


*** CODE SEGMENT '?PR?I2C_SetBitrate?T?i2c':
   72: void I2C_SetBitrate(void)
 00000000  B510      PUSH        {R4,LR}
   73: {
 00000002            ; SCOPE-START
   80:     time = (LPCconfig()->PLL_Multiplier*LPCconfig()->crystal) / 100000; 
 00000002  F7FF      BL          LPCconfig?T  ; T=0x0001  (1)
 00000004  FFFD      BL          LPCconfig?T  ; T=0x0001  (2)
 00000006  7900      LDRB        R0,[R0,#0x4]
 00000008  1C04      MOV         R4,R0
 0000000A  F7FF      BL          LPCconfig?T  ; T=0x0001  (1)
 0000000C  FFF9      BL          LPCconfig?T  ; T=0x0001  (2)
 0000000E  6800      LDR         R0,[R0,#0x0] ; LPCconfig?T
 00000010  4360      MUL         R0,R4
 00000012  4800      LDR         R1,=0x186A0
 00000014  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000016  FFF4      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 00000018  1C08      MOV         R0,R1
 0000001A  ---- Variable 'time' assigned to Register 'R1' ----
   81:     I2SCLL = time / 2;
 0000001A  084A      LSR         R2,R1,#0x1 ; time
 0000001C  4800      LDR         R0,=0xE001C014
 0000001E  8002      STRH        R2,[R0,#0x0]
   82:     I2SCLH = time - I2SCLL;
 00000020  4800      LDR         R0,=0xE001C014
 00000022  8800      LDRH        R0,[R0,#0x0]
 00000024  1A09      SUB         R1,R0 ; time
 00000026  4800      LDR         R0,=0xE001C010
 00000028  8001      STRH        R1,[R0,#0x0]
 0000002A            ; SCOPE-END
   83: }
 0000002A  BC10      POP         {R4}
 0000002C  BC08      POP         {R3}
 0000002E  4718      BX          R3
 00000030          ENDP ; 'I2C_SetBitrate?T'


*** CODE SEGMENT '?PR?I2C_irq?A?i2c':
   85: void I2C_irq(void) __irq
ARM COMPILER V2.11,  i2c                                                                   08/06/11  15:08:37  PAGE 6   

 00000000  E92D0003  STMDB       R13!,{R0-R1}
   87:     switch (I2STAT)
 00000004  E5100000  LDR         R0,=0xE001C004
 00000008  E5D00000  LDRB        R0,[R0,#0x0]
 0000000C  E3500010  CMP         R0,#0x0010
 00000010  0A000024  BEQ         L_4  ; Targ=0xA8
 00000014  E3500018  CMP         R0,#0x0018
 00000018  0A000026  BEQ         L_5  ; Targ=0xB8
 0000001C  E3500020  CMP         R0,#0x0020
 00000020  0A000031  BEQ         L_6  ; Targ=0xEC
 00000024  E3500028  CMP         R0,#0x0028
 00000028  0A000036  BEQ         L_7  ; Targ=0x108
 0000002C  E3500030  CMP         R0,#0x0030
 00000030  0A00004A  BEQ         L_8  ; Targ=0x160
 00000034  E3500040  CMP         R0,#0x0040
 00000038  0A000064  BEQ         L_1  ; Targ=0x1D0
 0000003C  E3500048  CMP         R0,#0x0048
 00000040  0A00004D  BEQ         L_10  ; Targ=0x17C
 00000044  E3500058  CMP         R0,#0x0058
 00000048  0A00004F  BEQ         L_11  ; Targ=0x18C
 0000004C  E3500008  CMP         R0,#0x0008
 00000050  1A000058  BNE         L_3  ; Targ=0x1B8
   89:     case Start_TXD:                         // Start condition has been transmitted
 00000054          L_2:
   90:         if (ReadWrite)
 00000054  E5100000  LDR         R0,=ReadWrite ; ReadWrite
 00000058  E5D00000  LDRB        R0,[R0,#0x0] ; ReadWrite
 0000005C  E3500000  CMP         R0,#0x0000
 00000060  0A000006  BEQ         L_12  ; Targ=0x80
   91:             I2DAT = deviceAddress | 0x01;   // Read mode
 00000064  E5100000  LDR         R0,=deviceAddress ; deviceAddress
 00000068  E5D00000  LDRB        R0,[R0,#0x0] ; deviceAddress
 0000006C  E1A01000  MOV         R1,R0
 00000070  E3811001  ORR         R1,R1,#0x0001
 00000074  E5100000  LDR         R0,=0xE001C008
 00000078  E5C01000  STRB        R1,[R0,#0x0]
 0000007C  EA000005  B           L_13  ; Targ=0x98
 00000080          L_12:
   93:             I2DAT = deviceAddress & 0xFE;   // Write mode
 00000080  E5100000  LDR         R0,=deviceAddress ; deviceAddress
 00000084  E5D00000  LDRB        R0,[R0,#0x0] ; deviceAddress
 00000088  E1A01000  MOV         R1,R0
 0000008C  E20110FE  AND         R1,R1,#0x00FE
 00000090  E5100000  LDR         R0,=0xE001C008
 00000094  E5C01000  STRB        R1,[R0,#0x0]
 00000098          L_13:
   94:         I2CONCLR = 0x38; // I2CONCLR_STA;   // Clear start bit
 00000098  E3A01038  MOV         R1,#0x38
 0000009C  E5100000  LDR         R0,=0xE001C018
 000000A0  E5C01000  STRB        R1,[R0,#0x0]
   95:         break;
 000000A4  EA000049  B           L_1  ; Targ=0x1D0
   97:     case Rep_Start_TXD:
 000000A8          L_4:
   98:         I2CONCLR = I2CONCLR_STA;    // Clear start bit
 000000A8  E3A01020  MOV         R1,#0x20
 000000AC  E5100000  LDR         R0,=0xE001C018
 000000B0  E5C01000  STRB        R1,[R0,#0x0]
   99:         break;
 000000B4  EA000045  B           L_1  ; Targ=0x1D0
  101:     case Address_TXD_ACK:           // SLA+W has been transmitted, ACK has been received
 000000B8          L_5:
  102:         index = 0;                  // Send first byte
 000000B8  E3A01000  MOV         R1,#0x0
 000000BC  E5100000  LDR         R0,=index ; index
 000000C0  E5801000  STR         R1,[R0,#0x0] ; index
ARM COMPILER V2.11,  i2c                                                                   08/06/11  15:08:37  PAGE 7   

  103:         I2DAT = dataBuffer[index];
 000000C4  E5100000  LDR         R0,=index ; index
 000000C8  E5901000  LDR         R1,[R0,#0x0] ; index
 000000CC  E5100000  LDR         R0,=dataBuffer ; dataBuffer
 000000D0  E7D01001  LDRB        R1,[R0,+R1]
 000000D4  E5100000  LDR         R0,=0xE001C008
 000000D8  E5C01000  STRB        R1,[R0,#0x0]
  104:         I2CONCLR = 0x38; // I2CONCLR_STA;   // Clear start bit
 000000DC  E3A01038  MOV         R1,#0x38
 000000E0  E5100000  LDR         R0,=0xE001C018
 000000E4  E5C01000  STRB        R1,[R0,#0x0]
  105:         break;
 000000E8  EA000038  B           L_1  ; Targ=0x1D0
  107:     case Address_TXD_NACK:          // SLA+W has been transmitted, NOT ACK has been received
 000000EC          L_6:
  108:         I2CONSET = I2CONSET_STO;    // Stop the transfer - ERROR
 000000EC  E3A01010  MOV         R1,#0x10
 000000F0  E5100000  LDR         R0,=0xE001C000
 000000F4  E5C01000  STRB        R1,[R0,#0x0]
  109:         status = I2C_Error;
 000000F8  E3A01000  MOV         R1,#0x0
 000000FC  E5100000  LDR         R0,=status ; status
 00000100  E5C01000  STRB        R1,[R0,#0x0] ; status
  110:         break;
 00000104  EA000031  B           L_1  ; Targ=0x1D0
  112:     case Data_TXD_ACK:              // Data Byte has been transmitted, ACK has been received
 00000108          L_7:
  113:         index++;                    // Next byte if any
 00000108  E5100000  LDR         R0,=index ; index
 0000010C  E5901000  LDR         R1,[R0,#0x0] ; index
 00000110  E2811001  ADD         R1,R1,#0x0001
 00000114  E5801000  STR         R1,[R0,#0x0] ; index
  114:         if (numBytes > index)
 00000118  E5100000  LDR         R0,=numBytes ; numBytes
 0000011C  E5D00000  LDRB        R0,[R0,#0x0] ; numBytes
 00000120  E5101000  LDR         R1,=index ; index
 00000124  E5911000  LDR         R1,[R1,#0x0] ; index
 00000128  E1500001  CMP         R0,R1
 0000012C  DA000004  BLE         L_14  ; Targ=0x144
  115:             I2DAT = dataBuffer[index];
 00000130  E5100000  LDR         R0,=dataBuffer ; dataBuffer
 00000134  E7D01001  LDRB        R1,[R0,+R1]
 00000138  E5100000  LDR         R0,=0xE001C008
 0000013C  E5C01000  STRB        R1,[R0,#0x0]
 00000140  EA000022  B           L_1  ; Targ=0x1D0
 00000144          L_14:
  118:             I2CONSET = I2CONSET_STO;// Stop the transfer - OK           
 00000144  E3A01010  MOV         R1,#0x10
 00000148  E5100000  LDR         R0,=0xE001C000
 0000014C  E5C01000  STRB        R1,[R0,#0x0]
  119:             status = I2C_OK;
 00000150  E3A01001  MOV         R1,#0x1
 00000154  E5100000  LDR         R0,=status ; status
 00000158  E5C01000  STRB        R1,[R0,#0x0] ; status
  121:         break;
 0000015C  EA00001B  B           L_1  ; Targ=0x1D0
  123:     case Data_TXD_NACK:             // Data Byte has been transmitted, NOT ACK has been received
 00000160          L_8:
  124:         I2CONSET = I2CONSET_STO;    // Stop the transfer - ERROR
 00000160  E3A01010  MOV         R1,#0x10
 00000164  E5100000  LDR         R0,=0xE001C000
 00000168  E5C01000  STRB        R1,[R0,#0x0]
  125:         status = I2C_Error;
 0000016C  E3A01000  MOV         R1,#0x0
 00000170  E5100000  LDR         R0,=status ; status
 00000174  E5C01000  STRB        R1,[R0,#0x0] ; status
ARM COMPILER V2.11,  i2c                                                                   08/06/11  15:08:37  PAGE 8   

  126:         break;
 00000178  EA000014  B           L_1  ; Targ=0x1D0
  131:     case Address_RXD_NACK:          // SLA+R has been transmitted, NOT ACK has been received
 0000017C          L_10:
  132:         status = I2C_Error;
 0000017C  E3A01000  MOV         R1,#0x0
 00000180  E5100000  LDR         R0,=status ; status
 00000184  E5C01000  STRB        R1,[R0,#0x0] ; status
  133:         break;
 00000188  EA000010  B           L_1  ; Targ=0x1D0
  135:     case Data_RXD_NACK:             // Data Byte has been received, no ACK sent
 0000018C          L_11:
  136:         dataIn = I2DAT;             // Read the byte
 0000018C  E5100000  LDR         R0,=0xE001C008
 00000190  E5D01000  LDRB        R1,[R0,#0x0]
 00000194  E5100000  LDR         R0,=dataIn ; dataIn
 00000198  E5C01000  STRB        R1,[R0,#0x0] ; dataIn
  137:         I2CONSET = I2CONSET_STO;    // Stop the transfer - OK
 0000019C  E3A01010  MOV         R1,#0x10
 000001A0  E5100000  LDR         R0,=0xE001C000
 000001A4  E5C01000  STRB        R1,[R0,#0x0]
  138:         status = I2C_OK;
 000001A8  E3A01001  MOV         R1,#0x1
 000001AC  E5100000  LDR         R0,=status ; status
 000001B0  E5C01000  STRB        R1,[R0,#0x0] ; status
  139:         break;
 000001B4  EA000005  B           L_1  ; Targ=0x1D0
  141:     default:                        // Error out, unknown state
 000001B8          L_3:
  142:         I2CONSET = I2CONSET_STO;    // Stop the transfer - ERROR
 000001B8  E3A01010  MOV         R1,#0x10
 000001BC  E5100000  LDR         R0,=0xE001C000
 000001C0  E5C01000  STRB        R1,[R0,#0x0]
  143:         status = I2C_Error;
 000001C4  E3A01000  MOV         R1,#0x0
 000001C8  E5100000  LDR         R0,=status ; status
 000001CC  E5C01000  STRB        R1,[R0,#0x0] ; status
  145:     }
 000001D0          L_1:
  146:     I2CONCLR = I2CONCLR_SI;
 000001D0  E3A01008  MOV         R1,#0x8
 000001D4  E5100000  LDR         R0,=0xE001C018
 000001D8  E5C01000  STRB        R1,[R0,#0x0]
  147:     VICVectAddr = 1;                // Acknowledge interrupt
 000001DC  E3A01001  MOV         R1,#0x1
 000001E0  E5100000  LDR         R0,=0xFFFFF030
 000001E4  E5801000  STR         R1,[R0,#0x0]
  148: }
 000001E8  E8BD0003  LDMIA       R13!,{R0-R1}
 000001EC  E25EF004  SUBS        R15,R14,#0x0004
 000001F0          ENDP ; 'I2C_irq?A'


*** CODE SEGMENT '?PR?I2C_Start?T?i2c':
  152:     I2CONSET = I2CONSET_STA;
 00000000  2120      MOV         R1,#0x20
 00000002  4800      LDR         R0,=0xE001C000
 00000004  7001      STRB        R1,[R0,#0x0]
  153:     status = I2C_Busy;
 00000006  2102      MOV         R1,#0x2
 00000008  4800      LDR         R0,=status ; status
 0000000A  7001      STRB        R1,[R0,#0x0] ; status
  154:     while (status == I2C_Busy);
 0000000C          L_16:
 0000000C  4800      LDR         R0,=status ; status
 0000000E  7800      LDRB        R0,[R0,#0x0] ; status
 00000010  2802      CMP         R0,#0x2
 00000012  D0FB      BEQ         L_16  ; T=0x0000000C
ARM COMPILER V2.11,  i2c                                                                   08/06/11  15:08:37  PAGE 9   

  156: }
 00000014  4770      BX          R14
 00000016          ENDP ; 'I2C_Start?T'


*** CODE SEGMENT '?PR?I2C_SendByte?T?i2c':
  158: int I2C_SendByte(unsigned char address, int num, int data[4])
 00000000  B510      PUSH        {R4,LR}
 00000002  ---- Variable 'data' assigned to Register 'R2' ----
 00000002  ---- Variable 'num' assigned to Register 'R1' ----
 00000002  ---- Variable 'address' assigned to Register 'R0' ----
  159: {
 00000002            ; SCOPE-START
  162:     deviceAddress = address;
 00000002  4800      LDR         R3,=deviceAddress ; deviceAddress
 00000004  7018      STRB        R0,[R3,#0x0] ; address
  163:     ReadWrite     = 0;
 00000006  2300      MOV         R3,#0x0
 00000008  4800      LDR         R0,=ReadWrite ; ReadWrite
 0000000A  7003      STRB        R3,[R0,#0x0] ; ReadWrite
  164:     numBytes      = num;
 0000000C  1C0B      MOV         R3,R1 ; num
 0000000E  4800      LDR         R0,=numBytes ; numBytes
 00000010  7003      STRB        R3,[R0,#0x0] ; numBytes
  165:     for (i = 0; i < num; i++) dataBuffer[i] = data[i];
 00000012  2000      MOV         R0,#0x0
 00000014  ---- Variable 'i' assigned to Register 'R0' ----
 00000014  E004      B           L_23  ; T=0x00000020
 00000016          L_24:
 00000016  0083      LSL         R3,R0,#0x2 ; i
 00000018  58D3      LDR         R3,[R2,R3]
 0000001A  4800      LDR         R4,=dataBuffer ; dataBuffer
 0000001C  5423      STRB        R3,[R4,R0]
 0000001E  3001      ADD         R0,#0x1
 00000020          L_23:
 00000020  4288      CMP         R0,R1 ; i
 00000022  DBF8      BLT         L_24  ; T=0x00000016
  166:     return I2C_Start();
 00000024  F7FF      BL          I2C_Start?T  ; T=0x0001  (1)
 00000026  FFEC      BL          I2C_Start?T  ; T=0x0001  (2)
 00000028            ; SCOPE-END
  167: }
 00000028  BC10      POP         {R4}
 0000002A  BC08      POP         {R3}
 0000002C  4718      BX          R3
 0000002E          ENDP ; 'I2C_SendByte?T'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =        13
  const size           =    ------
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
