function Q = mk_lateralization_rippledetection_pretest% PA_RIPPLEQUEST%% Determine spectro-temporal transfer function / modulation threshold.%% See also QUEST, PSYCHTOOLBOX, BASICSOUNDOUTPUTDEMO, PA_RIPPLEQUEST_PLOT% 2011 Marc van Wanrooij% e-mail: marcvanwanrooij@neural-code.com%% Includes modified code from:% QuestDemo, Copyright (c) 1996-2004 Denis G. Pelli% BasicSoundOutputDemo 06/07/2007 MK%% Input checkclose all hidden;clear all;fname = 'pretest'; %subject_ear_handpa_datadir;cd Maarten%% Ripple% Ripple% ripple parameters% - vel: velocity (Hz) or (cycles/s) temporal modulation. Indicates sweeping% of cycles/s past low frequency edge of spectrum. + value indicates% drifting downward in frequency, - value upward% - dens: density (cyc/oct) spectral modulation (is linear, octave is log function)vel		= pa_oct2bw(2,0:5);vel		= [fliplr(-vel) 0 vel];dens	= [pa_oct2bw(1,0:2)];[vel,dens] = meshgrid(vel,dens);veldens = [vel(:) dens(:)];n		= length(veldens); % number of ripplesnrep = 1; % number of repetitionsveldens = repmat(veldens,nrep,1);indx = randperm(n*nrep);veldens = veldens(indx,:);disp('*** Ripple Quest TDT gestart ***');%% TDT3, 1 rack: RP2.1 en PA.5circuitRP2 = 'C:\Dick\marcRipple.rco'; % circuit[zBus   err(1)] = ZBUS(1); %#ok<ASGLU> % number of racks[RP2_1  err(2)] = RP2(1,circuitRP2); % Real-time processor[PA5_1  err(3)] = PA5(1); % Programmable attenuatorok              = (sum(err) == 0);if ok	str = 'Everything is OK';else	str = 'Trouble';enddisp(str);% set attenuationPA5_1.SetAtten(21.2); % 65 dBAdisp('*** Over 3 seconden begint de test ***');pause(3)%% Progress barmodt		= 100; % 50 % modulation depthQ = struct([]);kk=0;for ii = 1:10	durstat		= 700 + 100*randi(16,1); % duration static is chosen from 400:100:1000 ms% 	disp('Generate sound');	snd			= pa_genripple(veldens(ii,1),veldens(ii,2),modt,3000,durstat,'display',0);	snd			= pa_envelope(snd',300)';	maxSamples  = length(snd);	if maxSamples>10^6		maxSamples = 10^6;	end		lat			= -100;	cnt			= 0;		while lat<0 && cnt<5 % if subject responded to fast, then reiterate this trial		kk = kk + 1;		clc		disp('---------------------------------------------');		disp(['Trial: ' num2str(kk)]);		disp('---------------------------------------------');% 		disp('Initialize TDT and play');		t			= playsound_tdt(snd,maxSamples,RP2_1);		lat			= t-durstat/1000;		cnt			= cnt+1;		% 		disp('Save data');		Q(kk).lat = lat;		Q(kk).velocity = veldens(ii,1);		Q(kk).density = veldens(ii,2);	end			%% Save data after every trial	pa_datadir;	cd Maarten			fnametime = [fname datestr(clock,30)];			save(fnametime,'Q');	endpa_datadir;cd Maartensave(['SessionCompleted_' fname ],'Q'); %saver after session/completion%% PLAYSOUND function t = playsound_tdt(snd,maxSamples,RP2_1)% Play sound, and determine reaction time%% Check buttonpress% Wait for release of all keys on keyboard:KbReleaseWait;press        = RP2_1.GetTagVal('Button');while press && ~KbCheck	press        = RP2_1.GetTagVal('Button');	KbCheck;end% Load sound% disp('% load sound');RP2_1.WriteTagV('WavData', 0, snd(1:maxSamples));RP2_1.SetTagVal('WavCount',maxSamples-1);% start soundtic;RP2_1.SoftTrg(1);% fprintf('Audio playback started, press any key when sound changes.\n');% do something useful% Wait for release of all keys on keyboard:KbReleaseWait;% wait while busybusy        = RP2_1.GetTagVal('Busy');while busy && ~KbCheck	busy = RP2_1.GetTagVal('Busy');	KbCheck;endt       = toc;% stop soundRP2_1.SetTagVal('WavCount',0);