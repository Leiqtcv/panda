function Q = mk_hemisphere_ripplequest% PA_RIPPLEQUEST%% Determine spectro-temporal transfer function / modulation threshold.%% See also QUEST, PSYCHTOOLBOX, BASICSOUNDOUTPUTDEMO, PA_RIPPLEQUEST_PLOT% 2011 Marc van Wanrooij% e-mail: marcvanwanrooij@neural-code.com%% Includes modified code from:% QuestDemo, Copyright (c) 1996-2004 Denis G. Pelli% BasicSoundOutputDemo 06/07/2007 MK%% Input checkclose all hidden;clear all;fname = 'sub1_right_test'; %subject_ear_handpa_datadir;%% Ripple% Ripple% ripple parameters% - vel: velocity (Hz) or (cycles/s) temporal modulation. Indicates sweeping% of cycles/s past low frequency edge of spectrum. + value indicates% drifting downward in frequency, - value upward% - dens: density (cyc/oct) spectral modulation (is linear, octave is log function)% vel		= pa_oct2bw(2,0:6);% vel		= [fliplr(-vel) 0 vel];% dens	= [0 pa_oct2bw(1,0:3)];% % veldens = [vel' zeros(size(vel))'; zeros(size(dens))' dens' ]% n		= length(veldens); % number of ripplesvel		= pa_oct2bw(2,0:5);vel		= [fliplr(-vel) 0 vel];dens	= [0 pa_oct2bw(1,0:3)];[vel,dens] = meshgrid(vel,dens);veldens = [vel(:) dens(:)];n		= length(veldens); % number of ripplesnrep = 5; % number of repetitionsveldens = repmat(veldens,nrep,1);indx = randperm(n*nrep);veldens = veldens(indx,:);disp('***ripple quest tdt gestart***');%% TDT3, 1 rack: RP2.1 en PA.5circuitRP2 = 'C:\Dick\marcRipple.rco'; % circuit[zBus   err(1)] = ZBUS(1); %#ok<ASGLU> % number of racks[RP2_1  err(2)] = RP2(1,circuitRP2); % Real-time processor[PA5_1  err(3)] = PA5(1); % Programmable attenuatorok              = (sum(err) == 0);if ok	str = 'Everything is OK';else	str = 'Trouble';enddisp(str);% set attenuationPA5_1.SetAtten(21.2); % 65 dBA%% Progress barmodt		= 50; % 20 % modulation depthkk = 0;Q = struct([]);for ii = 196:n*nrep 	clc;	durstat		= 700 + 100*randi(16,1); % duration static is chosen from 400:100:1000 ms	snd			= pa_genripple(veldens(ii,1),veldens(ii,2),modt,3000,durstat,'display',0);	snd			= pa_envelope(snd',300)';	maxSamples  = length(snd);	if maxSamples>10^6		maxSamples = 10^6;	end		lat			= -100;	cnt			= 0;		while lat<0 && cnt<5 % if subject responded to fast, then reiterate this trial		kk = kk+1;		t			= playsound_tdt(snd,maxSamples,RP2_1);		lat			= t-durstat/1000;		cnt			= cnt+1;				Q(kk).lat = lat;		Q(kk).velocity = veldens(ii,1);		Q(kk).density = veldens(ii,2);	end			%% Save data after every trial	pa_datadir;			fnametime = [fname datestr(clock,30)];			save(fnametime,'Q');	endpa_datadir;save([fname '_SessionCompleted'],'Q'); %saver after session/completion%% PLAYSOUND function t = playsound_tdt(snd,maxSamples,RP2_1)% Play sound, and determine reaction time%% Check buttonpress% Wait for release of all keys on keyboard:KbReleaseWait;press        = RP2_1.GetTagVal('Button');while press && ~KbCheck	press        = RP2_1.GetTagVal('Button');end% Load sounddisp('% load sound');RP2_1.WriteTagV('WavData', 0, snd(1:maxSamples));RP2_1.SetTagVal('WavCount',maxSamples-1);% start soundtic;RP2_1.SoftTrg(1);fprintf('Audio playback started, press any key when sound changes.\n');% do something useful% Wait for release of all keys on keyboard:KbReleaseWait;% wait while busybusy        = RP2_1.GetTagVal('Busy');while busy && ~KbCheck	busy = RP2_1.GetTagVal('Busy');endt       = toc;% stop soundRP2_1.SetTagVal('WavCount',0);%% PLAYSOUNDfunction t = playsound(snd,freq)% Play sound, and determine reaction time% initializationnrchannels	= 1;repetitions = 1;% % % Perform basic initialization of the sound driver:% % InitializePsychSound;% %% % % Open the default audio device [], with default mode [] (==Only playback),% % % and a required latencyclass of zero 0 == no low-latency mode, as well as% % % a frequency of freq and nrchannels sound channels.% % % This returns a handle to the audio device:% % try% % 	% Try with the 'freq'uency we wanted:% % 	pahandle = PsychPortAudio('Open', [], [], 0, freq, nrchannels);% % catch %#ok<CTCH>% % 	% Failed. Retry with default frequency as suggested by device:% % 	fprintf('\nCould not open device at wanted playback frequency of %i Hz. Will retry with device default frequency.\n', freq);% % 	fprintf('Sound may sound a bit out of tune, ...\n\n');% %% % 	psychlasterror('reset');% % 	pahandle = PsychPortAudio('Open', [], [], 0, [], nrchannels);% % end% %% % % Fill the audio playback buffer with the audio data 'wavedata':% % PsychPortAudio('FillBuffer', pahandle, snd);% % tic;% %% % % Start audio playback for 'repetitions' repetitions of the sound data,% % % start it immediately (0) and wait for the playback to start, return onset% % % timestamp.% % PsychPortAudio('Start', pahandle, repetitions, 0, 1);%player = audioplayer(snd,freq);tic;play(player);% % Wait for release of all keys on keyboard:% KbReleaseWait;fprintf('Audio playback started, press any key when sound changes.\n');% lastSample	= 0;% lastTime	= t1;input('Press');t = toc;stop(player);% % Stop playback:% PsychPortAudio('Stop', pahandle);%% % Close the audio device:% PsychPortAudio('Close', pahandle);